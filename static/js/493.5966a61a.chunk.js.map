{"version":3,"file":"static/js/493.5966a61a.chunk.js","mappings":"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","sources":["components/loading/LoadingSkeleton.js","components/movie/MovieCard.js","pages/MoviePage.js","hooks/useDebounce.js"],"sourcesContent":["import React from \"react\";\n\nconst LoadingSkeleton = (props) => {\n  return (\n    <div\n      className={`skeleton ${props.className}`}\n      style={{\n        height: props.height,\n        width: props.width || \"100%\",\n        borderRadius: props.radius,\n      }}\n    ></div>\n  );\n};\n\nexport default LoadingSkeleton;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { tmdbAPI } from \"../../config\";\nimport Button from \"../button/Button\";\nimport PropsTypes from \"prop-types\";\nimport LoadingSkeleton from \"../loading/LoadingSkeleton\";\n\nconst MovieCard = ({ item }) => {\n  const { title, vote_average, release_date, poster_path, id } = item;\n  const navigate = useNavigate();\n  return (\n    <div className=\"flex flex-col h-full p-3 text-white rounded-lg select-none movie-card bg-slate-800 \">\n      <img\n        src={tmdbAPI.image500(poster_path)}\n        alt=\"\"\n        className=\"w-full h-[250px] object-cover rounded-lg mb-5\"\n      />\n      <div className=\"flex flex-col flex-1\">\n        <h3 className=\"mb-3 text-xl font-bold \">{title}</h3>\n        <div className=\"flex items-center justify-between mb-10 text-sm opacity-50\">\n          <span>{new Date(release_date).getFullYear()}</span>\n          <span>{vote_average}</span>\n        </div>\n        <Button onClick={() => navigate(`/movie/${id}`)}>Watch Now</Button>\n      </div>\n    </div>\n  );\n};\nMovieCard.propTypes = {\n  item: PropsTypes.shape({\n    title: PropsTypes.string,\n    vote_average: PropsTypes.number,\n    release_date: PropsTypes.string,\n    poster_path: PropsTypes.string,\n    id: PropsTypes.number,\n  }),\n};\nexport const MovieCardSkeleton = () => {\n  return (\n    <div className=\"flex flex-col h-full p-3 text-white rounded-lg select-none movie-card bg-slate-800\">\n      <LoadingSkeleton className=\"w-full h-[250px] object-cover rounded-lg mb-5\"></LoadingSkeleton>\n      <div className=\"flex flex-col flex-1\">\n        <h3 className=\"mb-3 text-xl font-bold \">\n          <LoadingSkeleton className=\"w-full h-[20px]\"></LoadingSkeleton>\n        </h3>\n        <div className=\"flex items-center justify-between mb-10 text-sm opacity-50\">\n          <span>\n            <LoadingSkeleton className=\"w-50px h-[10px]\"></LoadingSkeleton>\n          </span>\n          <span>\n            <LoadingSkeleton className=\"w-30 h-[10px]\"></LoadingSkeleton>\n          </span>\n        </div>\n        <LoadingSkeleton className=\"w-full h-[45px] rounded-md\"></LoadingSkeleton>\n      </div>\n    </div>\n  );\n};\nexport default MovieCard;\n","import React, { useEffect, useState } from \"react\";\nimport useSWR from \"swr\";\nimport { fetcher, tmdbAPI } from \"../config\";\nimport MovieCard, { MovieCardSkeleton } from \"../components/movie/MovieCard\";\nimport useDebounce from \"../hooks/useDebounce\";\nimport ReactPaginate from \"react-paginate\";\nimport { v4 } from \"uuid\";\nimport Button from \"../components/button/Button\";\nimport Pagination from \"react-responsive-pagination\";\n\nconst itemsPerPage = 20;\nconst MoviePage = () => {\n  const [itemOffset, setItemOffset] = useState(0);\n  const [pageCount, setPageCount] = useState(0);\n\n  const [nextPage, setNextPage] = useState(1);\n  const [filter, setFilter] = useState(\"\");\n  const [url, setUrl] = useState(tmdbAPI.getMovieList(\"popular\", nextPage));\n  const filterDebounce = useDebounce(filter, 500);\n  const handleFilterChange = (e) => {\n    setFilter(e.target.value);\n  };\n  const { data, error } = useSWR(url, fetcher);\n\n  const loading = !data && !error;\n  useEffect(() => {\n    if (filterDebounce) {\n      setUrl(tmdbAPI.getMovieSearch(filterDebounce, nextPage));\n    } else {\n      setUrl(tmdbAPI.getMovieList(\"popular\", nextPage));\n    }\n  }, [filterDebounce, nextPage]);\n\n  const movies = data?.results || [];\n  // react paginate\n  useEffect(() => {\n    if (!data || !data.total_results) return;\n\n    setPageCount(Math.ceil(data.total_results / itemsPerPage));\n  }, [data, itemOffset]);\n\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected * itemsPerPage) % data.total_results;\n    setNextPage(event.selected + 1);\n\n    setItemOffset(newOffset);\n  };\n  //////////////\n  return (\n    <div className=\"py-10 page-container\">\n      <div className=\"flex mb-10\">\n        <div className=\"flex-1\">\n          <input\n            onChange={handleFilterChange}\n            type=\"text\"\n            className=\"w-full p-4 text-white outline-none bg-slate-800 \"\n            placeholder=\"Type here to search...\"\n          />\n        </div>\n        <button className=\"p-4 text-white bg-primary\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            strokeWidth=\"1.5\"\n            stroke=\"currentColor\"\n            className=\"w-6 h-6\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z\"\n            />\n          </svg>\n        </button>\n      </div>\n      {loading && (\n        <div className=\"grid grid-cols-4 gap-10\">\n          {new Array(itemsPerPage).fill(0).map(() => (\n            <MovieCardSkeleton key={v4()}></MovieCardSkeleton>\n          ))}\n        </div>\n      )}\n      {/* {loading && (\n        <div className=\"w-10 h-10 mx-auto border border-4 rounded-full border-primary border-t-transparent animate-spin\"></div>\n      )} */}\n      <div className=\"grid grid-cols-4 gap-10 max-md:grid-cols-3 max-md:gap-4 max-sm:grid-cols-2 max-sm:gap-3\">\n        {!loading &&\n          movies.length > 0 &&\n          movies.map((item) => (\n            <MovieCard key={item.id} item={item}></MovieCard>\n          ))}\n      </div>\n\n      <div className=\"mt-10 max-sm:text-[12px]   \">\n        <ReactPaginate\n          breakLabel=\"...\"\n          nextLabel=\"next >\"\n          onPageChange={handlePageClick}\n          pageRangeDisplayed={5}\n          pageCount={pageCount}\n          previousLabel=\"< previous\"\n          renderOnZeroPageCount={null}\n          className=\"pagination\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MoviePage;\n","import { useEffect, useState } from \"react\";\n\nexport default function useDebounce(initializeValue = \"\", delay = 1000) {\n  const [debounceValue, setDebounceValue] = useState(initializeValue);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebounceValue(initializeValue);\n    }, delay);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [delay, initializeValue]);\n  return debounceValue;\n}\n"],"names":["props","className","style","height","width","borderRadius","radius","MovieCardSkeleton","item","title","vote_average","release_date","poster_path","id","navigate","useNavigate","src","tmdbAPI","alt","Date","getFullYear","Button","onClick","useState","itemOffset","setItemOffset","pageCount","setPageCount","nextPage","setNextPage","filter","setFilter","url","setUrl","filterDebounce","initializeValue","delay","debounceValue","setDebounceValue","useEffect","timer","setTimeout","clearTimeout","useDebounce","useSWR","fetcher","data","error","loading","movies","results","total_results","Math","ceil","onChange","e","target","value","type","placeholder","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","Array","map","MovieCard","v4","length","breakLabel","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount"],"sourceRoot":""}